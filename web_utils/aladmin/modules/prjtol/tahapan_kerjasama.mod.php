<?
/* admin frontpage
 copyright 2004 - dody suria wijaya, dsw software house - contact: dswsh@plasa.com */

include_once(APP_INCLUDE_ROOT.'/auth.inc.php');
include_once(APP_INCLUDE_ROOT.'/dbgrid.class.php');
require_once( LOG4PHP_DIR . '/LoggerManager.php' ); //log4php

class tahapan_kerjasama extends TableManager {
    var $db_table, $properties;
    function tahapan_kerjasama() {
        parent::TableManager(); # must call base class

        global $html_title;
        $this->title = 'Tahapan Kerjasama';
        $html_title = $this->title;
        $this->db_table = $GLOBALS['dbpre'].'tahapan_kerjasama_tab';

        $this->properties['kode_tahapan'] = new Prop(array('label'=>'Kode  Tahapan','colname'=>'kode_tahapan','required'=>True,'length'=>6, 'is_key'=>True));
		$this->properties['tahapan'] = new Prop(array('label'=>'Tahapan','colname'=>'tahapan', 'required'=>True, 'is_key'=>false,'length'=>45));
		$this->properties['kode_kerjasama'] = new Prop(array('label'=>'Tipe Kerjasama','colname'=>'kode_kerjasama', 'required'=>True, 'is_key'=>true,'length'=>4,'inputtype'=>'combobox','enumerate'=>'tipe_kerjasama'));		
		//$this->properties['kode_kerjasama'] = new Prop(array('label'=>'Tipe  Kerjasama','colname'=>'kode_kerjasama','datatype'=>'int','required'=>True,'inputtype'=>'combobox','enumerate'=>'tipe_kerjasama', 'is_key'=>True));
		$this->properties['kategori1'] = new Prop(array('label'=>'Kategori Utama','colname'=>'kategori1','required'=>True, 'is_key'=>True,'length'=>4,'inputtype'=>'combobox','enumerate'=>'kategori'));
		$this->properties['kategori2'] = new Prop(array('label'=>'Sub Kategori','colname'=>'kategori2','required'=>True, 'is_key'=>True,'length'=>4,'inputtype'=>'combobox','enumerate'=>'kategori'));
		$this->properties['urutan'] = new Prop(array('label'=>'Urutan','colname'=>'urutan','required'=>True,'datatype'=>'int'));

        $this->enum_keyval = array('kode_tahapan','tahapan');

        //$this->grid_command[] = array('attach','Attach to newsletter...');
        //$this->grid_command[] = array('','-----');


        $prog->must_authenticated = True;

        #~ if ($_SESSION['login_level'] > 1)
            #~ $this->db_where="author='{$_SESSION['login_user']}'";
        #~ $this->enum_keyval = array('rowid','nama');
        //$this->childds[] = 'progress_kerjasama';
        $this->browse_mode = 'form';

    }

    function go() { // called inside main content
        //debug($this);
		$logger =& LoggerManager::getLogger('tahapan_kerjasama');
        //LoggerNDC::push('NDC generated by TestTest::testLog()');
    /*
        $logger->debug('Try the debug statement');
        $logger->info('Try the info statement');
        $logger->warn('Try the debug warn');
        $logger->error('Try the statement Error');
        $logger->fatal('Try the fatal statement');
	*/
		#~ echo "<h3>Tahapan Kerjasama</h3>";
        $this->basic_handler();

    }



    function insert($rowindex) {
    //    $this->ds->create_date[$rowindex] = 'Now()';
      //  $this->ds->author[$rowindex] = $_SESSION['login_user'];
        parent::insert($rowindex);
    }

    function showgrid() {

        parent::showgrid();
    }

	function show_pick_tahapan($module,$proyek) {

                # show data grid, for query, multi edit, and multi new
        $action = ($action == '')? $this->action: $action;
	$this->logger->debug('show pick Tahapan ' );

        $this->showerror();
#~ debug(); # BUG: UPDATE, POST-ERROR, ENTERED VALUE DOES NOT GET PASSED TO INPUT-VALUE
        global $last_message;
        if ($last_message != '') echo $last_message;    # place holder for anyone who whises to put msg above grid

        # decide, which columns to show in table
        $this->colgrid = array();
        foreach ($this->properties as $key=>$col) {
            if ($action == 'browse' and $col->hidden) continue;
            $this->colgrid[] = $key;

        }
        # prepare javascript validation and confirmation function


        # create table view
        echo '<form name="gridform" method=post action="'.$_SERVER['PHP_SELF'].'" onSubmit="return submit_confirm(this)">';
        echo '<input type=hidden name=m value="'.$this->module.'">';
        /*
		if ($action == 'browse') {
            echo '<input type=hidden name=go value="'.htmlentities($GLOBALS['full_self_url']).'">';         # url to go after successful submitation
        }
		*/
        

        echo '<table width="100%" border="0" cellpadding="0" cellspacing="0">';  //style="border-collapse: collapse;"
        echo '<tr>';
//        echo '<td><b>'.ucfirst($this->action).": {$this->title}</b> <small>[<a href='{$_SERVER['PHP_SELF']}?m={$this->module}&set_browse_mode=form'>form</a>]</small> </td>";
        echo '<td><b>'.ucfirst('Silakan Pilih Tahapan').": Pengisian Progres Kerjasama</b> </td>";
        echo '<td align="right">';
        /*if ($this->allow_new) {
            $url = $_SERVER['PHP_SELF'].'?m='.$this->module.'&act=new&num_row=1&go='.urlencode($GLOBALS['full_self_url']);
            echo '<a href="'.$url.'"><img src="images/b_new.png" border="0"> new</a>';
        }*/
        echo '</td>';
        echo '</tr></table>';  //outer table

        echo '<table border="0" cellpadding="2" cellspacing="1">';  //style="border-collapse: collapse;"
        echo '<tr class="greyformtitle">';
        echo '<th colspan=3>&nbsp;</th>';   # for command
        foreach ($this->colgrid as $colvar) {
            $col = $this->properties[$colvar];
            //if ($action == 'edit' and !$col->updatable) continue;
            //if ($action == 'new' and !$col->insertable) continue;
            /*
			if ($action == 'browse') {    # browse: enable sort by table col
                $_sortdir = $this->_sortdir != ''? $this->_sortdir : 'ASC';
                if ($this->_orderby == $col->colname and $this->_sortdir != '') {
                    $_sortdir = ($_sortdir == 'ASC')? 'DESC': 'ASC'; # swap ASC/DESC for currently sorted column name
                }
                echo "<th><a href='{$_SERVER['PHP_SELF']}?m={$this->module}&act=browse&row={$this->_rowstart}&orderby={$col->colname}&sortdir={$_sortdir}'>{$col->label}</a>";
                if ($this->_orderby == $col->colname and $this->_sortdir != '') {
                    echo ' <img src="images/'.(($_sortdir == 'ASC')? 'asc_order.png': 'desc_order.png').'" border="0">';
                }
                echo '</th>';
            }
            else {
				*/
                echo '<th>'.$col->label.'</th>';
            //}
			

        }
        echo "</tr>\r\n";

        if ($this->db_count > 0 or $_REQUEST['row'] != '') {
            for ($i = 0; $i < $this->db_count; $i++) {
                /*  for edit, we want the row to be sorted just as how it was selected in browse
                    this is the striking difference between this->ds->_rowid (coming from database, sorted as "sort by") and this->_rowid (coming from request, sorted as from request)
                */
              
				//_kerjasama=2;
				$rowindex = $i;
                if ($action == 'edit') {
                    $rowindex = array_search($this->_rowid[$i], $this->ds->_rowid); # mangle rowindex
                }

                $rowcolour = ($i % 2 == 0)? 'greyformlight': 'greyformdark';
                if ($this->error_rows[$i]) $rowcolour = 'error';
                echo '<tr class="'.$rowcolour.'" valign="top">';

              
               // else {
                    echo '<input type=hidden name="rowid['.$rowindex.']" value="'.$this->ds->_rowid[$rowindex].'">';   # for edit-action
                    echo '<td colspan="3"><a href="index.php?m=progress_kerjasama&act=new&num_row=1&proyek='. $proyek . '&tahapan=' .$this->ds->_rowid[$rowindex] . '">' .($i+1).'</a></td>';
                //}

               
                #~ else
                    #~ echo '<td>&nbsp;</td>';

              //  if ($this->allow_view and $action == 'browse')
               //     echo "<td>&nbsp;<a href='{$_SERVER['PHP_SELF']}?m={$this->module}&act=view&rowid[]={$this->ds->_rowid[$rowindex]}&go=".urlencode($GLOBALS['full_self_url'])."'><img src='images/button_view.png' border=0></a>&nbsp;</td>";
                #~ else
                    #~ echo '<td>&nbsp;</td>';

                foreach ($this->colgrid as $colvar) {
                    $col = $this->properties[$colvar];
                  
					
					     
                        if ($col->enumerate) { # if field is enumerated, get the enumerate value instead
                            if (is_string($col->enumerate)) {
                                include_once(APP_MODULE_ROOT .'/'. $col->enumerate.'.mod.php');
                                $e = new $col->enumerate();
                                $value = $e->enum_decode($this->ds->{$colvar}[$rowindex]);
								$this->logger->debug('show grid ..String' . $e->enum_decode($this->ds->{$colvar}[$rowindex]));
                            }
                            elseif (is_array($col->enumerate)) {
                                $value = $col->enumerate[$this->ds->{$colvar}[$rowindex]];
								$this->logger->debug('show grid ..Array' . $col->enumerate[$this->ds->{$colvar}[$rowindex]]);
                            }

                        }
                        else
					   {	
							$value = $this->ds->{$colvar}[$rowindex];
					   }
                        //}
                        $maxchar = $col->browse_maxchar;
                        if ($maxchar > 0 and strlen($value) > $maxchar) {
                            $value = substr($value,0,$maxchar).'..';
                        }
                        $value = htmlentities($value);
                        if ($value == '') $value = '&nbsp;';
                        if ($col->is_key)
                            echo '<td><b>'.$value.'</b></td>';
                        else
                            echo '<td>'.$value.'</td>';
                    
                }
                echo "</tr>\r\n";
            }
            echo '</table>';
        }
        else {
            echo '</table>';
            echo '<p><i>No records</i>';
        }

    /*
		if ($action == 'edit' or $action == 'new') {
            echo '<p><input type=submit value=" Save "> | ';
            echo '<b><a href="'.$this->_go.'">Cancel</a></b></p>';
            #~ echo '<b><a href="'.$this->_go.'" onclick="window.history.back();return false;">Cancel</a></b></p>';
        }

        if ($action == 'browse' and $this->db_count > 0 ) {
            echo '<script>function setCheckBoxes(do_check) { var cb = document.forms[\'gridform\'].elements[\'rowid[]\']; if (cb.length) {for (var i = 0; i < cb.length; i++) cb[i].checked = do_check} else {cb.checked = do_check}; return true;}</script>';
            echo '<img src="images/arrow_ltr.png" border="0">';
            echo '<a href="'.$_SERVER['PHP_SELF'].'" onclick="setCheckBoxes(true);return false;">Check All</a> / ';
            echo '<a href="'.$_SERVER['PHP_SELF'].'" onclick="setCheckBoxes(false);return false;">Uncheck All</a> ';
            echo '<select name=act onchange="return submit_confirm(this.form)"><option value="">With selected:</option>';
            foreach ($this->grid_command as $command) {
                echo "<option value='{$command[0]}'>{$command[1]}</option>";
            }
            echo '</select>';
            echo '<input type=submit value=Do>';

            # build page browsing below table
            echo '<br>';
            $max_rownum = $this->max_rownum();
            if ($this->browse_rows > 0) {
                #~ $current_row = $_REQUEST['row'] == ''? 0: $_REQUEST['row'];
                if ($max_rownum > $this->db_count) {    # split into pages
                    echo 'Pages: ';
                    $pages = array();
                    for ($rowidx = 0, $pg = 1; $rowidx < $max_rownum; $rowidx += $this->browse_rows, $pg += 1) {
                        if ($this->_rowstart == $rowidx)
                            $pages[] = "<b>$pg</b>";
                        else
                            #~ $pages[] = "<a href='{$_SERVER['PHP_SELF']}?m={$this->module}&act=browse&row={$rowidx}'>$pg</a>";
                            $pages[] = "<a href='{$_SERVER['PHP_SELF']}?m={$this->module}&act=browse&row={$rowidx}&orderby={$this->_orderby}&sortdir={$this->_sortdir}'>$pg</a>";
                    }
                    echo join(' | ',$pages);
                    echo ' / ';
                }
            }
            echo 'Total: '.$max_rownum.'';
            if ($this->browse_rows > 0 and $max_rownum > $this->db_count) {
                echo " - <a href='{$_SERVER['PHP_SELF']}?m={$this->module}&act=browse&maxrows=0&orderby={$this->_orderby}&sortdir={$this->_sortdir}'>Show All</a>";
            }


        }
        echo '</form>';
		*/

        


    }

    function check_del() {
        # for normal user, make sure they can only modify their own
        if ($_SESSION['login_level'] > 1) {
            foreach ($this->_rowid as $rowid) {
                if (!$this->get_row(array('rowid'=>$rowid,'author'=>$_SESSION['login_user'])))
                    echo '<p>You may not modify this row</p>';
                    return False;
            }
        }
        return True;
    }

    function prepare_update() {
        # for normal user, make sure they can only modify their own
        if ($_SESSION['login_level'] > 1) {
            foreach ($this->_rowid as $rowid) {
                if (!$this->get_row(array('rowid'=>$rowid,'author'=>$_SESSION['login_user']))) {
                    echo '<p>You may not modify this row</p>';
                    return False;
                }
            }
        }
        return True;
    }



}

?>